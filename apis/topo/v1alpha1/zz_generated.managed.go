//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 NDD.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ndd-gen. DO NOT EDIT.

package v1alpha1

import nddv1 "github.com/yndd/ndd-runtime/apis/common/v1"

// GetActive of this TopoTopology.
func (mg *TopoTopology) GetActive() bool {
	return mg.Spec.Active
}

// GetCondition of this TopoTopology.
func (mg *TopoTopology) GetCondition(ck nddv1.ConditionKind) nddv1.Condition {
	return mg.Status.GetCondition(ck)
}

// GetDeletionPolicy of this TopoTopology.
func (mg *TopoTopology) GetDeletionPolicy() nddv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetExternalLeafRefs of this TopoTopology.
func (mg *TopoTopology) GetExternalLeafRefs() []string {
	return mg.Status.ExternalLeafRefs
}

// GetNetworkNodeReference of this TopoTopology.
func (mg *TopoTopology) GetNetworkNodeReference() *nddv1.Reference {
	return mg.Spec.NetworkNodeReference
}

// GetResourceIndexes of this TopoTopology.
func (mg *TopoTopology) GetResourceIndexes() map[string]string {
	return mg.Status.ResourceIndexes
}

// GetTarget of this TopoTopology.
func (mg *TopoTopology) GetTarget() []string {
	return mg.Status.Target
}

// SetActive of this TopoTopology.
func (mg *TopoTopology) SetActive(b bool) {
	mg.Spec.Active = b
}

// SetConditions of this TopoTopology.
func (mg *TopoTopology) SetConditions(c ...nddv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TopoTopology.
func (mg *TopoTopology) SetDeletionPolicy(r nddv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetExternalLeafRefs of this TopoTopology.
func (mg *TopoTopology) SetExternalLeafRefs(n []string) {
	mg.Status.ExternalLeafRefs = n
}

// SetNetworkNodeReference of this TopoTopology.
func (mg *TopoTopology) SetNetworkNodeReference(r *nddv1.Reference) {
	mg.Spec.NetworkNodeReference = r
}

// SetResourceIndexes of this TopoTopology.
func (mg *TopoTopology) SetResourceIndexes(n map[string]string) {
	mg.Status.ResourceIndexes = n
}

// SetTarget of this TopoTopology.
func (mg *TopoTopology) SetTarget(t []string) {
	mg.Status.Target = t
}

// GetActive of this TopoTopologyLink.
func (mg *TopoTopologyLink) GetActive() bool {
	return mg.Spec.Active
}

// GetCondition of this TopoTopologyLink.
func (mg *TopoTopologyLink) GetCondition(ck nddv1.ConditionKind) nddv1.Condition {
	return mg.Status.GetCondition(ck)
}

// GetDeletionPolicy of this TopoTopologyLink.
func (mg *TopoTopologyLink) GetDeletionPolicy() nddv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetExternalLeafRefs of this TopoTopologyLink.
func (mg *TopoTopologyLink) GetExternalLeafRefs() []string {
	return mg.Status.ExternalLeafRefs
}

// GetNetworkNodeReference of this TopoTopologyLink.
func (mg *TopoTopologyLink) GetNetworkNodeReference() *nddv1.Reference {
	return mg.Spec.NetworkNodeReference
}

// GetResourceIndexes of this TopoTopologyLink.
func (mg *TopoTopologyLink) GetResourceIndexes() map[string]string {
	return mg.Status.ResourceIndexes
}

// GetTarget of this TopoTopologyLink.
func (mg *TopoTopologyLink) GetTarget() []string {
	return mg.Status.Target
}

// SetActive of this TopoTopologyLink.
func (mg *TopoTopologyLink) SetActive(b bool) {
	mg.Spec.Active = b
}

// SetConditions of this TopoTopologyLink.
func (mg *TopoTopologyLink) SetConditions(c ...nddv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TopoTopologyLink.
func (mg *TopoTopologyLink) SetDeletionPolicy(r nddv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetExternalLeafRefs of this TopoTopologyLink.
func (mg *TopoTopologyLink) SetExternalLeafRefs(n []string) {
	mg.Status.ExternalLeafRefs = n
}

// SetNetworkNodeReference of this TopoTopologyLink.
func (mg *TopoTopologyLink) SetNetworkNodeReference(r *nddv1.Reference) {
	mg.Spec.NetworkNodeReference = r
}

// SetResourceIndexes of this TopoTopologyLink.
func (mg *TopoTopologyLink) SetResourceIndexes(n map[string]string) {
	mg.Status.ResourceIndexes = n
}

// SetTarget of this TopoTopologyLink.
func (mg *TopoTopologyLink) SetTarget(t []string) {
	mg.Status.Target = t
}

// GetActive of this TopoTopologyNode.
func (mg *TopoTopologyNode) GetActive() bool {
	return mg.Spec.Active
}

// GetCondition of this TopoTopologyNode.
func (mg *TopoTopologyNode) GetCondition(ck nddv1.ConditionKind) nddv1.Condition {
	return mg.Status.GetCondition(ck)
}

// GetDeletionPolicy of this TopoTopologyNode.
func (mg *TopoTopologyNode) GetDeletionPolicy() nddv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetExternalLeafRefs of this TopoTopologyNode.
func (mg *TopoTopologyNode) GetExternalLeafRefs() []string {
	return mg.Status.ExternalLeafRefs
}

// GetNetworkNodeReference of this TopoTopologyNode.
func (mg *TopoTopologyNode) GetNetworkNodeReference() *nddv1.Reference {
	return mg.Spec.NetworkNodeReference
}

// GetResourceIndexes of this TopoTopologyNode.
func (mg *TopoTopologyNode) GetResourceIndexes() map[string]string {
	return mg.Status.ResourceIndexes
}

// GetTarget of this TopoTopologyNode.
func (mg *TopoTopologyNode) GetTarget() []string {
	return mg.Status.Target
}

// SetActive of this TopoTopologyNode.
func (mg *TopoTopologyNode) SetActive(b bool) {
	mg.Spec.Active = b
}

// SetConditions of this TopoTopologyNode.
func (mg *TopoTopologyNode) SetConditions(c ...nddv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TopoTopologyNode.
func (mg *TopoTopologyNode) SetDeletionPolicy(r nddv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetExternalLeafRefs of this TopoTopologyNode.
func (mg *TopoTopologyNode) SetExternalLeafRefs(n []string) {
	mg.Status.ExternalLeafRefs = n
}

// SetNetworkNodeReference of this TopoTopologyNode.
func (mg *TopoTopologyNode) SetNetworkNodeReference(r *nddv1.Reference) {
	mg.Spec.NetworkNodeReference = r
}

// SetResourceIndexes of this TopoTopologyNode.
func (mg *TopoTopologyNode) SetResourceIndexes(n map[string]string) {
	mg.Status.ResourceIndexes = n
}

// SetTarget of this TopoTopologyNode.
func (mg *TopoTopologyNode) SetTarget(t []string) {
	mg.Status.Target = t
}
